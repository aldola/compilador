Grammar

    0 $accept: program $end

    1 $@1: /* empty */

    2 program: LET declarations IN $@1 commands END

    3 declarations: /* empty */
    4             | INTEGER id_seq IDENTIFIER '.'

    5 id_seq: /* empty */
    6       | id_seq IDENTIFIER ','

    7 commands: /* empty */
    8         | commands command ';'

    9 command: SKIP
   10        | READ IDENTIFIER
   11        | WRITE exp
   12        | IDENTIFIER ASSGNOP exp

   13 $@2: /* empty */

   14 $@3: /* empty */

   15 $@4: /* empty */

   16 command: IF bool_exp $@2 THEN commands $@3 ELSE $@4 commands FI

   17 $@5: /* empty */

   18 $@6: /* empty */

   19 command: WHILE $@5 bool_exp $@6 DO commands END

   20 bool_exp: exp '<' exp
   21         | exp '=' exp
   22         | exp '>' exp

   23 exp: NUMBER
   24    | IDENTIFIER
   25    | exp '+' exp
   26    | exp '-' exp
   27    | exp '*' exp
   28    | exp '/' exp
   29    | exp '^' exp
   30    | '(' exp ')'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 30
')' (41) 30
'*' (42) 27
'+' (43) 25
',' (44) 6
'-' (45) 26
'.' (46) 4
'/' (47) 28
';' (59) 8
'<' (60) 20
'=' (61) 21
'>' (62) 22
'^' (94) 29
error (256)
NUMBER (258) 23
IDENTIFIER (259) 4 6 10 12 24
IF (260) 16
WHILE (261) 19
SKIP (262) 9
THEN (263) 16
ELSE (264) 16
FI (265) 16
DO (266) 19
END (267) 2 19
INTEGER (268) 4
READ (269) 10
WRITE (270) 11
LET (271) 2
IN (272) 2
ASSGNOP (273) 12


Nonterminals, with rules where they appear

$accept (32)
    on left: 0
program (33)
    on left: 2, on right: 0
$@1 (34)
    on left: 1, on right: 2
declarations (35)
    on left: 3 4, on right: 2
id_seq (36)
    on left: 5 6, on right: 4 6
commands (37)
    on left: 7 8, on right: 2 8 16 19
command (38)
    on left: 9 10 11 12 16 19, on right: 8
$@2 (39)
    on left: 13, on right: 16
$@3 (40)
    on left: 14, on right: 16
$@4 (41)
    on left: 15, on right: 16
$@5 (42)
    on left: 17, on right: 19
$@6 (43)
    on left: 18, on right: 19
bool_exp (44)
    on left: 20 21 22, on right: 16 19
exp (45)
    on left: 23 24 25 26 27 28 29 30, on right: 11 12 20 21 22 25 26
    27 28 29 30


State 0

    0 $accept: . program $end

    LET  shift, and go to state 1

    program  go to state 2


State 1

    2 program: LET . declarations IN $@1 commands END

    INTEGER  shift, and go to state 3

    $default  reduce using rule 3 (declarations)

    declarations  go to state 4


State 2

    0 $accept: program . $end

    $end  shift, and go to state 5


State 3

    4 declarations: INTEGER . id_seq IDENTIFIER '.'

    $default  reduce using rule 5 (id_seq)

    id_seq  go to state 6


State 4

    2 program: LET declarations . IN $@1 commands END

    IN  shift, and go to state 7


State 5

    0 $accept: program $end .

    $default  accept


State 6

    4 declarations: INTEGER id_seq . IDENTIFIER '.'
    6 id_seq: id_seq . IDENTIFIER ','

    IDENTIFIER  shift, and go to state 8


State 7

    2 program: LET declarations IN . $@1 commands END

    $default  reduce using rule 1 ($@1)

    $@1  go to state 9


State 8

    4 declarations: INTEGER id_seq IDENTIFIER . '.'
    6 id_seq: id_seq IDENTIFIER . ','

    '.'  shift, and go to state 10
    ','  shift, and go to state 11


State 9

    2 program: LET declarations IN $@1 . commands END

    $default  reduce using rule 7 (commands)

    commands  go to state 12


State 10

    4 declarations: INTEGER id_seq IDENTIFIER '.' .

    $default  reduce using rule 4 (declarations)


State 11

    6 id_seq: id_seq IDENTIFIER ',' .

    $default  reduce using rule 6 (id_seq)


State 12

    2 program: LET declarations IN $@1 commands . END
    8 commands: commands . command ';'

    IDENTIFIER  shift, and go to state 13
    IF          shift, and go to state 14
    WHILE       shift, and go to state 15
    SKIP        shift, and go to state 16
    END         shift, and go to state 17
    READ        shift, and go to state 18
    WRITE       shift, and go to state 19

    command  go to state 20


State 13

   12 command: IDENTIFIER . ASSGNOP exp

    ASSGNOP  shift, and go to state 21


State 14

   16 command: IF . bool_exp $@2 THEN commands $@3 ELSE $@4 commands FI

    NUMBER      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    '('         shift, and go to state 24

    bool_exp  go to state 25
    exp       go to state 26


State 15

   19 command: WHILE . $@5 bool_exp $@6 DO commands END

    $default  reduce using rule 17 ($@5)

    $@5  go to state 27


State 16

    9 command: SKIP .

    $default  reduce using rule 9 (command)


State 17

    2 program: LET declarations IN $@1 commands END .

    $default  reduce using rule 2 (program)


State 18

   10 command: READ . IDENTIFIER

    IDENTIFIER  shift, and go to state 28


State 19

   11 command: WRITE . exp

    NUMBER      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    '('         shift, and go to state 24

    exp  go to state 29


State 20

    8 commands: commands command . ';'

    ';'  shift, and go to state 30


State 21

   12 command: IDENTIFIER ASSGNOP . exp

    NUMBER      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    '('         shift, and go to state 24

    exp  go to state 31


State 22

   23 exp: NUMBER .

    $default  reduce using rule 23 (exp)


State 23

   24 exp: IDENTIFIER .

    $default  reduce using rule 24 (exp)


State 24

   30 exp: '(' . exp ')'

    NUMBER      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    '('         shift, and go to state 24

    exp  go to state 32


State 25

   16 command: IF bool_exp . $@2 THEN commands $@3 ELSE $@4 commands FI

    $default  reduce using rule 13 ($@2)

    $@2  go to state 33


State 26

   20 bool_exp: exp . '<' exp
   21         | exp . '=' exp
   22         | exp . '>' exp
   25 exp: exp . '+' exp
   26    | exp . '-' exp
   27    | exp . '*' exp
   28    | exp . '/' exp
   29    | exp . '^' exp

    '-'  shift, and go to state 34
    '+'  shift, and go to state 35
    '*'  shift, and go to state 36
    '/'  shift, and go to state 37
    '^'  shift, and go to state 38
    '<'  shift, and go to state 39
    '='  shift, and go to state 40
    '>'  shift, and go to state 41


State 27

   19 command: WHILE $@5 . bool_exp $@6 DO commands END

    NUMBER      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    '('         shift, and go to state 24

    bool_exp  go to state 42
    exp       go to state 26


State 28

   10 command: READ IDENTIFIER .

    $default  reduce using rule 10 (command)


State 29

   11 command: WRITE exp .
   25 exp: exp . '+' exp
   26    | exp . '-' exp
   27    | exp . '*' exp
   28    | exp . '/' exp
   29    | exp . '^' exp

    '-'  shift, and go to state 34
    '+'  shift, and go to state 35
    '*'  shift, and go to state 36
    '/'  shift, and go to state 37
    '^'  shift, and go to state 38

    $default  reduce using rule 11 (command)


State 30

    8 commands: commands command ';' .

    $default  reduce using rule 8 (commands)


State 31

   12 command: IDENTIFIER ASSGNOP exp .
   25 exp: exp . '+' exp
   26    | exp . '-' exp
   27    | exp . '*' exp
   28    | exp . '/' exp
   29    | exp . '^' exp

    '-'  shift, and go to state 34
    '+'  shift, and go to state 35
    '*'  shift, and go to state 36
    '/'  shift, and go to state 37
    '^'  shift, and go to state 38

    $default  reduce using rule 12 (command)


State 32

   25 exp: exp . '+' exp
   26    | exp . '-' exp
   27    | exp . '*' exp
   28    | exp . '/' exp
   29    | exp . '^' exp
   30    | '(' exp . ')'

    '-'  shift, and go to state 34
    '+'  shift, and go to state 35
    '*'  shift, and go to state 36
    '/'  shift, and go to state 37
    '^'  shift, and go to state 38
    ')'  shift, and go to state 43


State 33

   16 command: IF bool_exp $@2 . THEN commands $@3 ELSE $@4 commands FI

    THEN  shift, and go to state 44


State 34

   26 exp: exp '-' . exp

    NUMBER      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    '('         shift, and go to state 24

    exp  go to state 45


State 35

   25 exp: exp '+' . exp

    NUMBER      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    '('         shift, and go to state 24

    exp  go to state 46


State 36

   27 exp: exp '*' . exp

    NUMBER      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    '('         shift, and go to state 24

    exp  go to state 47


State 37

   28 exp: exp '/' . exp

    NUMBER      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    '('         shift, and go to state 24

    exp  go to state 48


State 38

   29 exp: exp '^' . exp

    NUMBER      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    '('         shift, and go to state 24

    exp  go to state 49


State 39

   20 bool_exp: exp '<' . exp

    NUMBER      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    '('         shift, and go to state 24

    exp  go to state 50


State 40

   21 bool_exp: exp '=' . exp

    NUMBER      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    '('         shift, and go to state 24

    exp  go to state 51


State 41

   22 bool_exp: exp '>' . exp

    NUMBER      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    '('         shift, and go to state 24

    exp  go to state 52


State 42

   19 command: WHILE $@5 bool_exp . $@6 DO commands END

    $default  reduce using rule 18 ($@6)

    $@6  go to state 53


State 43

   30 exp: '(' exp ')' .

    $default  reduce using rule 30 (exp)


State 44

   16 command: IF bool_exp $@2 THEN . commands $@3 ELSE $@4 commands FI

    $default  reduce using rule 7 (commands)

    commands  go to state 54


State 45

   25 exp: exp . '+' exp
   26    | exp . '-' exp
   26    | exp '-' exp .
   27    | exp . '*' exp
   28    | exp . '/' exp
   29    | exp . '^' exp

    '*'  shift, and go to state 36
    '/'  shift, and go to state 37
    '^'  shift, and go to state 38

    $default  reduce using rule 26 (exp)


State 46

   25 exp: exp . '+' exp
   25    | exp '+' exp .
   26    | exp . '-' exp
   27    | exp . '*' exp
   28    | exp . '/' exp
   29    | exp . '^' exp

    '*'  shift, and go to state 36
    '/'  shift, and go to state 37
    '^'  shift, and go to state 38

    $default  reduce using rule 25 (exp)


State 47

   25 exp: exp . '+' exp
   26    | exp . '-' exp
   27    | exp . '*' exp
   27    | exp '*' exp .
   28    | exp . '/' exp
   29    | exp . '^' exp

    '^'  shift, and go to state 38

    $default  reduce using rule 27 (exp)


State 48

   25 exp: exp . '+' exp
   26    | exp . '-' exp
   27    | exp . '*' exp
   28    | exp . '/' exp
   28    | exp '/' exp .
   29    | exp . '^' exp

    '^'  shift, and go to state 38

    $default  reduce using rule 28 (exp)


State 49

   25 exp: exp . '+' exp
   26    | exp . '-' exp
   27    | exp . '*' exp
   28    | exp . '/' exp
   29    | exp . '^' exp
   29    | exp '^' exp .

    '^'  shift, and go to state 38

    $default  reduce using rule 29 (exp)


State 50

   20 bool_exp: exp '<' exp .
   25 exp: exp . '+' exp
   26    | exp . '-' exp
   27    | exp . '*' exp
   28    | exp . '/' exp
   29    | exp . '^' exp

    '-'  shift, and go to state 34
    '+'  shift, and go to state 35
    '*'  shift, and go to state 36
    '/'  shift, and go to state 37
    '^'  shift, and go to state 38

    $default  reduce using rule 20 (bool_exp)


State 51

   21 bool_exp: exp '=' exp .
   25 exp: exp . '+' exp
   26    | exp . '-' exp
   27    | exp . '*' exp
   28    | exp . '/' exp
   29    | exp . '^' exp

    '-'  shift, and go to state 34
    '+'  shift, and go to state 35
    '*'  shift, and go to state 36
    '/'  shift, and go to state 37
    '^'  shift, and go to state 38

    $default  reduce using rule 21 (bool_exp)


State 52

   22 bool_exp: exp '>' exp .
   25 exp: exp . '+' exp
   26    | exp . '-' exp
   27    | exp . '*' exp
   28    | exp . '/' exp
   29    | exp . '^' exp

    '-'  shift, and go to state 34
    '+'  shift, and go to state 35
    '*'  shift, and go to state 36
    '/'  shift, and go to state 37
    '^'  shift, and go to state 38

    $default  reduce using rule 22 (bool_exp)


State 53

   19 command: WHILE $@5 bool_exp $@6 . DO commands END

    DO  shift, and go to state 55


State 54

    8 commands: commands . command ';'
   16 command: IF bool_exp $@2 THEN commands . $@3 ELSE $@4 commands FI

    IDENTIFIER  shift, and go to state 13
    IF          shift, and go to state 14
    WHILE       shift, and go to state 15
    SKIP        shift, and go to state 16
    READ        shift, and go to state 18
    WRITE       shift, and go to state 19

    $default  reduce using rule 14 ($@3)

    command  go to state 20
    $@3      go to state 56


State 55

   19 command: WHILE $@5 bool_exp $@6 DO . commands END

    $default  reduce using rule 7 (commands)

    commands  go to state 57


State 56

   16 command: IF bool_exp $@2 THEN commands $@3 . ELSE $@4 commands FI

    ELSE  shift, and go to state 58


State 57

    8 commands: commands . command ';'
   19 command: WHILE $@5 bool_exp $@6 DO commands . END

    IDENTIFIER  shift, and go to state 13
    IF          shift, and go to state 14
    WHILE       shift, and go to state 15
    SKIP        shift, and go to state 16
    END         shift, and go to state 59
    READ        shift, and go to state 18
    WRITE       shift, and go to state 19

    command  go to state 20


State 58

   16 command: IF bool_exp $@2 THEN commands $@3 ELSE . $@4 commands FI

    $default  reduce using rule 15 ($@4)

    $@4  go to state 60


State 59

   19 command: WHILE $@5 bool_exp $@6 DO commands END .

    $default  reduce using rule 19 (command)


State 60

   16 command: IF bool_exp $@2 THEN commands $@3 ELSE $@4 . commands FI

    $default  reduce using rule 7 (commands)

    commands  go to state 61


State 61

    8 commands: commands . command ';'
   16 command: IF bool_exp $@2 THEN commands $@3 ELSE $@4 commands . FI

    IDENTIFIER  shift, and go to state 13
    IF          shift, and go to state 14
    WHILE       shift, and go to state 15
    SKIP        shift, and go to state 16
    FI          shift, and go to state 62
    READ        shift, and go to state 18
    WRITE       shift, and go to state 19

    command  go to state 20


State 62

   16 command: IF bool_exp $@2 THEN commands $@3 ELSE $@4 commands FI .

    $default  reduce using rule 16 (command)
